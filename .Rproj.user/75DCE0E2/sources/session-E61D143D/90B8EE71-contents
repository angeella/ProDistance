#################Compute distances between reduced rotations#################
path <- "C:/Users/livio/Desktop/"
setwd(path)
source("mds/Script/library.R")

np <- import("numpy")

path <-""


#Load rotations matrix (reduced so, n times n) n = 370

sub_ids <- c(sapply(c(1:4,6:30),function(x) ifelse(x<10,paste0("0",x), paste0(x))))

R <- array(NA, dim =c(length(sub_ids), 370,370))

for(i in c(1:length(sub_ids))){
  
  R[i,,] <- np$load(paste0(path,"mds/Data/FoodData/R/sub-",sub_ids[i],"promises_aligned_Identityk10_rotation.npz"))[["nimg"]]

}

#Load stimuli data

targets <- read.table("mds/Data/FoodData/events.tsv",header = T)

targets$volumes <- round(targets$onset/1.6)
targets <- rbind(targets, rep(NA, 4))
targets$volumes[18] <- round(targets$volumes[17] + targets$duration[17])

targets_vol <- sapply(c(1:17), function(x){
  rep(targets$trial_type[x], targets$volumes[x+1] - targets$volumes[x])
}, simplify = FALSE)

targets_vol <- unlist(targets_vol)




#Compute distances between rotation (reduced ones)

dist_R <- list()

for(i in 1:29){
  dist_R[[i]] <- lapply(c(1:29), function(x) Frobenius(R[x,,], R[i,,]))
  
}

dist_matrix_R <- matrix(unlist(dist_R), nrow = 29, ncol = 29)

save(dist_matrix_R = dist_matrix_R, file = "mds/Data/FoodData/Output/output_R_dist.RData")

load("mds/Data/FoodData/Output/output_R_dist.RData")

stress <-c()

for(i in 1:20){
  
  stress[i] <- mds(dist_matrix_R,ndim = i, 
                   type = "mspline")$stress
  
}

ggplot()+ geom_line(aes(x = c(1:20), y = stress)) +
  geom_hline(yintercept = 0.05, color = "red", lty = 2) + theme_classic() + 
  xlab("Number of dimensions") +
  geom_vline(xintercept = which(stress < 0.05)[1], color = "red", lty = 2)+
  theme(text = element_text(size=20))

opt  = which(stress < 0.05)[1]

mds_R <- mds(dist_matrix_R,type = "mspline", ndim = opt)


#Load partecipant data and marge dbs

part <- read.table("mds/Data/FoodData/participants.tsv",
                   header = T)
part <- part[c(1:4,6:30),]
db <- cbind(mds_R$conf, part)
db$ID <- c(1:29)
db$cycle_phase_covariate <- ifelse(db$cycle_phase_covariate == "0", "Luteal phase",
                                   ifelse(db$cycle_phase_covariate == "1", "Follicular and Ovulation phase", "Menstrual phase"))
db$cycle_phase_covariate  <- as.factor(db$cycle_phase_covariate)
db <- db %>% dplyr::filter(days_since_menstruationi < 60)
db <- db %>% dplyr::mutate(days_since_menstruationi_cat = cut(db$days_since_menstruationi,breaks = 3))


save(db = db, file = "mds/Data/FoodData/Output/output_mds_R.RData")


