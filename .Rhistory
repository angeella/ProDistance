color = "appetite_post_scaled")) +
scale_size_manual(values = c(1,3,5), name = "Cycle Phase") +
scale_color_gradient(low="blue",high="green", name = "Diet importance") +
scale_shape_discrete(name = "Diet success") +
theme_classic() + geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
theme(text = element_text(size=20)) +
xlab("Second dimension")+
ylab("Third dimension")
db %>% ggplot() +
geom_point(aes_string(x = "D12", y = "D7",
size = "cycle_phase_covariate",
# size = "appetite_post_cat",
color = "appetite_post_scaled")) +
scale_size_manual(values = c(1,3,5), name = "Cycle Phase") +
scale_color_gradient(low="blue",high="green", name = "Diet importance") +
scale_shape_discrete(name = "Diet success") +
theme_classic() + geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
theme(text = element_text(size=20)) +
xlab("Second dimension")+
ylab("Third dimension")
mod1 <- lm(diet_success_scaled ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + D9 + D10 + D11 + D12,
data = db)
mod1 <- lm(diet_importance_scaled ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + D9 + D10 + D11 + D12,
data = db)
summary(mod1)
db %>% ggplot() +
geom_point(aes_string(x = "D12", y = "D7",
size = "cycle_phase_covariate",
shape = "diet_importance_cat",
color = "appetite_post_scaled")) +
scale_size_manual(values = c(1,3,5), name = "Cycle Phase") +
scale_color_gradient(low="blue",high="green", name = "Diet importance") +
scale_shape_discrete(name = "Diet success") +
theme_classic() + geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
theme(text = element_text(size=20)) +
xlab("Second dimension")+
ylab("Third dimension")
db %>% ggplot() +
geom_point(aes_string(x = "D12", y = "D7",
size = "cycle_phase_covariate",
shape = "diet_importance_cat",
color = "appetite_post_scaled")) +
scale_size_manual(values = c(1,3,5), name = "Cycle Phase") +
scale_color_gradient(low="blue",high="green", name = "Appetite post experiment") +
scale_shape_discrete(name = "Diet importance") +
theme_classic() + geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
theme(text = element_text(size=20)) +
xlab("Second dimension")+
ylab("Third dimension")
db %>% ggplot() +
geom_point(aes_string(x = "D12", y = "D7",
size = "cycle_phase_covariate",
shape = "diet_importance_cat",
color = "appetite_post_scaled")) +
scale_size_manual(values = c(1,3,5), name = "Cycle Phase") +
scale_color_gradient(low="blue",high="green", name = "Appetite post experiment") +
scale_shape_discrete(name = "Diet importance") +
theme_classic() + geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
theme(text = element_text(size=20)) +
xlab("First dimension")+
ylab("Second dimension")
opt
ggplot()+ geom_line(aes(x = c(1:20), y = stress)) +
geom_hline(yintercept = 0.05, color = "red", lty = 2) + theme_classic() +
xlab("Number of dimensions") +
geom_vline(xintercept = which(stress < 0.05)[1], color = "red", lty = 2)
ggplot()+ geom_line(aes(x = c(1:20), y = stress)) +
geom_hline(yintercept = 0.05, color = "red", lty = 2) + theme_classic() +
xlab("Number of dimensions") +
geom_vline(xintercept = which(stress < 0.05)[1], color = "red", lty = 2)+
theme(text = element_text(size=20))
stress
stress[12]
db %>% ggplot() +
geom_point(aes_string(x = "D12", y = "D7",
size = "cycle_phase_covariate",
shape = "diet_importance_cat",
color = "appetite_post_scaled")) +
scale_size_manual(values = c(3,5,8), name = "Cycle Phase") +
scale_color_gradient(low="blue",high="green", name = "Appetite post experiment") +
scale_shape_discrete(name = "Diet importance") +
theme_classic() + geom_hline(yintercept = 0, lty = 2) +
geom_vline(xintercept = 0, lty = 2) +
theme(text = element_text(size=20)) +
xlab("First dimension")+
ylab("Second dimension")
dd <- svd(diag(N))
dd<- diag(10)
dd
svd(dd)
colnames(db)
table(db$cycle_phase_covariate)
mds_R$conf
mds_R$confdist
mod1 <- lm(diet_importance_scaled ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + D9 + D10 + D11 + D12,
data = db)
summary(mod1)
mod1 <- lm(appetite_post_scaled ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + D9 + D10 + D11 + D12,
data = db)
summary(mod1)
0.000190 *4
0.000190 *5
library(flip)
install.packages("flip")
library(flip)
flip(appetite_post_scaled ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + D9 + D10 + D11 + D12,
data = db)
out <- flip(appetite_post_scaled ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + D9 + D10 + D11 + D12,
+    data = db)
out <- flip(appetite_post_scaled ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + D9 + D10 + D11 + D12, data = db)
out
p.adjust(out)
mod1 <- lm(appetite_post_scaled ~ D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8 + D9 + D10 + D11 + D12,
data = db)
outtt <- summary(mod1)
outtt["coefficients"]$coefficients
devtools::install_github("angeella/alignProMises")
library(alignProMises)
data<- array(rnorm(24576*60*3), dim= c(24576,60,3))
out <-ProMisesModel(data, maxIt = 20, t = 1/100, k = 1,
scaling = FALSE, reflection = FALSE,
subj = FALSE, centered = TRUE)
out <-EfficientProMises(data, maxIt = 20, t = 1/100, k = 1,
scaling = FALSE, reflection = FALSE,
subj = FALSE, centered = TRUE)
out <-EfficientProMises(data, maxIt = 20, t = 1/100, k = 0,
scaling = FALSE, reflection = FALSE,
subj = FALSE, centered = TRUE)
out <-EfficientProMises(data)
db<- array(rnorm(24576*60*3), dim= c(24576,60,3))
out <-EfficientProMises(db)
out <-EfficientProMises(db, k =1)
dim(db)
out <-EfficientProMises(db, k =1, Q = diag(60))
dim(out$Xest)
dim(out$R)
db<- array(rnorm(20*100*3), dim= c(20,100,3))
out <-ProMisesModel(db, maxIt = 20, t = 1/100, k = 1,
scaling = FALSE, reflection = FALSE,
subj = FALSE, centered = TRUE)
out$Xest #matrices aligned
out$R #rotation
dim(out$R)
out <-EfficientProMises(db, k =1, Q = diag(60))
data = d
data = db
if(!is.array(data) & !is.list(data)){warnings("Please insert an array or a list of matrices with dimension time points - voxels")}
if(is.list(data)){
data <- array(as.numeric(unlist(data)), dim=c(nrow(data[[1]]), ncol(data[[1]]), length(data)))
}
data
row <- dim(data)[1]
col <- dim(data)[2]
nsubj <- dim(data)[3]
count = 1
dist = vector()
dist[1] <- Inf
# M <- aaply(data, c(1,2), mean)
M <- colMeans(aperm(data, c(3, 1, 2)))
centered
centered = FALSE
if(centered){
datas_centered <- aaply(data, 3, function(x) x - M)
X <- aaply(datas_centered, 1, function(x) x/norm(x,type="F"))
X <- aperm(X,c(2,3,1))
}else{
X <- data
}
ref_ds <- M
out <- svds(ref_ds, k = nrow(ref_ds))
library(rARPACK)
out <- svds(ref_ds, k = nrow(ref_ds))
V <- out$v
Xstar <- array(NA, dim=c(nrow(X), ncol(V), nsubj))
V
dim(V)
Xstar <- array(NA, dim=c(nrow(X), ncol(V), nsubj))
Xstar[] <- apply(X, 3, function(x) x%*%V)
ref_ds <- ref_ds %*% V
Xest <-  array(NA, dim(Xstar))
R <-  array(NA, c(row, row, nsubj))
Qstar <- matrix(0, nrow = row, ncol = row)
i=1
GPASub(Xstar[,,i], Qstar[[i]], k, kQ = NULL, ref_ds, scaling, reflection, centered)
k = 1
GPASub(Xstar[,,i], Qstar[[i]], k, kQ = NULL, ref_ds, scaling, reflection, centered)
Qstar
ref_ds
GPASub(Xstar[,,i], Qstar[[i]], k, kQ = NULL, ref_ds = ref_ds, scaling = scaling, reflection = reflection, centered = centered)
t(ref_ds) %*% Xstar[,,i] + k * t(Qstar[[i]])
t(ref_ds) %*% Xstar[,,i]
k * t(Qstar[[i]])
k
t(Qstar[[i]])
row
row
Qstar <- matrix(0, nrow = row, ncol = row)
Qstar
k * Qstar
t(ref_ds) %*% Xstar[,,i]
t(ref_ds) %*% Xstar[,,i] * k Qstar[[i]]
t(ref_ds) %*% Xstar[,,i] * k *Qstar[[i]]
t(ref_ds) %*% Xstar[,,i] + k *Qstar[[i]]
Qstar
Xstar
GPASub(Xstar[,,i], Qstar[[i]], k, kQ = NULL, ref_ds = ref_ds, scaling = scaling, reflection = reflection, centered = centered)
GPASub(Xstar[,,i], Qstar, k, kQ = NULL, ref_ds = ref_ds, scaling = scaling, reflection = reflection, centered = centered)
scaling = FALSE
reflection = FALSE
centered = FALSE
GPASub(Xstar[,,i], Qstar[[i]], k, kQ = NULL, ref_ds = ref_ds, scaling = scaling, reflection = reflection, centered = centered)
dim(Xstar[,,i])
dim(ref_ds)
dim(Qstar[[i]])
Qstar[[i]]
if(!is.array(data) & !is.list(data)){warnings("Please insert an array or a list of matrices with dimension time points - voxels")}
if(is.list(data)){
data <- array(as.numeric(unlist(data)), dim=c(nrow(data[[1]]), ncol(data[[1]]), length(data)))
}
row <- dim(data)[1]
col <- dim(data)[2]
nsubj <- dim(data)[3]
count = 1
dist = vector()
dist[1] <- Inf
# M <- aaply(data, c(1,2), mean)
M <- colMeans(aperm(data, c(3, 1, 2)))
if(centered){
datas_centered <- aaply(data, 3, function(x) x - M)
X <- aaply(datas_centered, 1, function(x) x/norm(x,type="F"))
X <- aperm(X,c(2,3,1))
}else{
X <- data
}
if(is.null(ref_ds)){
ref_ds <- M
}
out <- svds(ref_ds, k = nrow(ref_ds))
V <- out$v
Xstar <- array(NA, dim=c(nrow(X), ncol(V), nsubj))
Xstar[] <- apply(X, 3, function(x) x%*%V)
ref_ds <- ref_ds %*% V
Xest <-  array(NA, dim(Xstar))
R <-  array(NA, c(row, row, nsubj))
# Calcolo Qstar
if(is.null(Q)){
if(subj){
Qstar <- foreach(i = c(1:nsubj)) %dopar% {
if(!is.null(coord)){
coord_star <- t(V) %*% coord[[i]]
D <- dist(coord_star, method = "euclidean", diag = T, upper = T)
exp(-as.matrix(D))
}
else
matrix(0, nrow = row, ncol = row)
}
}
else{
if(!is.null(coord)){
coord_star <- t(V) %*% coord
D = dist(coord_star, method = "euclidean", diag = T, upper = T)
Qstar <- exp(-as.matrix(D))
}
else
Qstar <- matrix(0, nrow = row, ncol = row)
}
}
Q = NULL
# Calcolo Qstar
if(is.null(Q)){
if(subj){
Qstar <- foreach(i = c(1:nsubj)) %dopar% {
if(!is.null(coord)){
coord_star <- t(V) %*% coord[[i]]
D <- dist(coord_star, method = "euclidean", diag = T, upper = T)
exp(-as.matrix(D))
}
else
matrix(0, nrow = row, ncol = row)
}
}
else{
if(!is.null(coord)){
coord_star <- t(V) %*% coord
D = dist(coord_star, method = "euclidean", diag = T, upper = T)
Qstar <- exp(-as.matrix(D))
}
else
Qstar <- matrix(0, nrow = row, ncol = row)
}
}
subj = FALSE
# Calcolo Qstar
if(is.null(Q)){
if(subj){
Qstar <- foreach(i = c(1:nsubj)) %dopar% {
if(!is.null(coord)){
coord_star <- t(V) %*% coord[[i]]
D <- dist(coord_star, method = "euclidean", diag = T, upper = T)
exp(-as.matrix(D))
}
else
matrix(0, nrow = row, ncol = row)
}
}
else{
if(!is.null(coord)){
coord_star <- t(V) %*% coord
D = dist(coord_star, method = "euclidean", diag = T, upper = T)
Qstar <- exp(-as.matrix(D))
}
else
Qstar <- matrix(0, nrow = row, ncol = row)
}
}
coord = FALSE
# Calcolo Qstar
if(is.null(Q)){
if(subj){
Qstar <- foreach(i = c(1:nsubj)) %dopar% {
if(!is.null(coord)){
coord_star <- t(V) %*% coord[[i]]
D <- dist(coord_star, method = "euclidean", diag = T, upper = T)
exp(-as.matrix(D))
}
else
matrix(0, nrow = row, ncol = row)
}
}
else{
if(!is.null(coord)){
coord_star <- t(V) %*% coord
D = dist(coord_star, method = "euclidean", diag = T, upper = T)
Qstar <- exp(-as.matrix(D))
}
else
Qstar <- matrix(0, nrow = row, ncol = row)
}
}
coord = NULL
# Calcolo Qstar
if(is.null(Q)){
if(subj){
Qstar <- foreach(i = c(1:nsubj)) %dopar% {
if(!is.null(coord)){
coord_star <- t(V) %*% coord[[i]]
D <- dist(coord_star, method = "euclidean", diag = T, upper = T)
exp(-as.matrix(D))
}
else
matrix(0, nrow = row, ncol = row)
}
}
else{
if(!is.null(coord)){
coord_star <- t(V) %*% coord
D = dist(coord_star, method = "euclidean", diag = T, upper = T)
Qstar <- exp(-as.matrix(D))
}
else
Qstar <- matrix(0, nrow = row, ncol = row)
}
}
Qstar
while(dist[count] > t & count < maxIt){
out <- foreach(i = c(1:nsubj)) %dopar% {
if(subj){
GPASub(Xstar[,,i], Qstar[[i]], k, kQ = NULL, ref_ds = ref_ds, scaling = scaling, reflection = reflection, centered = centered)
#vMFP(X[,,i], k, Q[,,i], ref_ds, scaling, reflection)
}
else{
GPASub(Xstar[,,i], Qstar, k, kQ = NULL, ref_ds, scaling, reflection, centered)
#vMFP(X[,,i], k, Q, ref_ds, scaling, reflection)
}
}
count <- count + 1
Xest = array(unlist(sapply(c(1:nsubj), function(x) out[[x]]$Xest,simplify = F)), dim = dim(Xstar))
R = array(unlist(sapply(c(1:nsubj), function(x) out[[x]]$R,simplify = F)), dim = c(row,row,nsubj))
ref_ds_old = ref_ds
# ref_ds = aaply(Xest, c(1,2), mean)
ref_ds <- colMeans(aperm(Xest, c(3, 1, 2)))
dist[count] <- norm(ref_ds-ref_ds_old, type="F")
}
dist
count
out <- foreach(i = c(1:nsubj)) %dopar% {
if(subj){
GPASub(Xstar[,,i], Qstar[[i]], k, kQ = NULL, ref_ds = ref_ds, scaling = scaling, reflection = reflection, centered = centered)
#vMFP(X[,,i], k, Q[,,i], ref_ds, scaling, reflection)
}
else{
GPASub(Xstar[,,i], Qstar, k, kQ = NULL, ref_ds, scaling, reflection, centered)
#vMFP(X[,,i], k, Q, ref_ds, scaling, reflection)
}
}
library(foreach)
out <- foreach(i = c(1:nsubj)) %dopar% {
if(subj){
GPASub(Xstar[,,i], Qstar[[i]], k, kQ = NULL, ref_ds = ref_ds, scaling = scaling, reflection = reflection, centered = centered)
#vMFP(X[,,i], k, Q[,,i], ref_ds, scaling, reflection)
}
else{
GPASub(Xstar[,,i], Qstar, k, kQ = NULL, ref_ds, scaling, reflection, centered)
#vMFP(X[,,i], k, Q, ref_ds, scaling, reflection)
}
}
out <- foreach(i = c(1:nsubj)) %dopar% {
if(subj){
GPASub(Xstar[,,i], Qstar[[i]], k, kQ = NULL, ref_ds = ref_ds, scaling = scaling, reflection = reflection, centered = centered)
#vMFP(X[,,i], k, Q[,,i], ref_ds, scaling, reflection)
}
else{
GPASub(Xstar[,,i], Qstar, k, kQ = NULL, ref_ds, scaling, reflection, centered)
#vMFP(X[,,i], k, Q, ref_ds, scaling, reflection)
}
}
i
nsubj
GPASub(Xstar[,,i], Qstar[[i]], k, kQ = NULL, ref_ds = ref_ds, scaling = scaling, reflection = reflection, centered = centered)
Qstar
Qstar[[i]]
row <- dim(data)[1]
col <- dim(data)[2]
nsubj <- dim(data)[3]
count = 1
dist = vector()
dist[1] <- Inf
# M <- aaply(data, c(1,2), mean)
M <- colMeans(aperm(data, c(3, 1, 2)))
if(centered){
datas_centered <- aaply(data, 3, function(x) x - M)
X <- aaply(datas_centered, 1, function(x) x/norm(x,type="F"))
X <- aperm(X,c(2,3,1))
}else{
X <- data
}
if(is.null(ref_ds)){
ref_ds <- M
}
out <- svds(ref_ds, k = nrow(ref_ds))
V <- out$v
Xstar <- array(NA, dim=c(nrow(X), ncol(V), nsubj))
Xstar[] <- apply(X, 3, function(x) x%*%V)
data = db
if(!is.array(data) & !is.list(data)){warnings("Please insert an array or a list of matrices with dimension time points - voxels")}
if(is.list(data)){
data <- array(as.numeric(unlist(data)), dim=c(nrow(data[[1]]), ncol(data[[1]]), length(data)))
}
row <- dim(data)[1]
col <- dim(data)[2]
nsubj <- dim(data)[3]
count = 1
dist = vector()
dist[1] <- Inf
# M <- aaply(data, c(1,2), mean)
M <- colMeans(aperm(data, c(3, 1, 2)))
if(centered){
datas_centered <- aaply(data, 3, function(x) x - M)
X <- aaply(datas_centered, 1, function(x) x/norm(x,type="F"))
X <- aperm(X,c(2,3,1))
}else{
X <- data
}
if(is.null(ref_ds)){
ref_ds <- M
}
out <- svds(ref_ds, k = nrow(ref_ds))
V <- out$v
Xstar <- array(NA, dim=c(nrow(X), ncol(V), nsubj))
Xstar[] <- apply(X, 3, function(x) x%*%V)
x%*%V
out <- svds(ref_ds, k = nrow(ref_ds))
V <- out$v
Xstar <- array(NA, dim=c(nrow(X), ncol(V), nsubj))
array(NA, dim=c(nrow(X), ncol(V), nsubj))
#ma puoi fare cosi brutalmente:
semiorto <- array(0, dim(dim(db)[1], dim(db)[1], dim(db)[3]))
#ma puoi fare cosi brutalmente:
semiorto <- array(0, dim =c(dim(db)[1], dim(db)[1], dim(db)[3]))
Xsemi<- array(0, dim =c(dim(db)[1], dim(db)[1], dim(db)[3]))
for(i in seq(dim(db)[3])){
semiorto[,,i] <- svd(db[,,i], k = nrow(db[,,i]))$v
Xsemi[,,i] <- db[,,i] %*% semiorto[,,i]
}
for(i in seq(dim(db)[3])){
semiorto[,,i] <- rARPACK::svds(db[,,i], k = nrow(db[,,i]))$v
Xsemi[,,i] <- db[,,i] %*% semiorto[,,i]
}
db[,,i]
nrow(db[,,i])
rARPACK::svds(db[,,i], k = nrow(db[,,i]))
rARPACK::svds(db[,,i], k = nrow(db[,,i]))$v
semiorto[,,i] <- rARPACK::svds(db[,,i], k = nrow(db[,,i]))$v
dim(rARPACK::svds(db[,,i], k = nrow(db[,,i]))$v)
#ma puoi fare cosi brutalmente:
semiorto <- array(0, dim =c(dim(db)[2], dim(db)[1], dim(db)[3]))
semiorto[,,i] <- rARPACK::svds(db[,,i], k = nrow(db[,,i]))$v
for(i in seq(dim(db)[3])){
semiorto[,,i] <- rARPACK::svds(db[,,i], k = nrow(db[,,i]))$v
Xsemi[,,i] <- db[,,i] %*% semiorto[,,i]
}
dim(Xsemi)
out <-ProMisesModel(Xsemi, maxIt = 20, t = 1/100, k = 1,
scaling = FALSE, reflection = FALSE,
subj = FALSE, centered = TRUE)
out$Xest #matrices aligned
dim(out$R)
